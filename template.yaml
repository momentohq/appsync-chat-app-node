AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application Model (SAM) template for an AWS AppSync API with a Lambda resolver.

Parameters:
  SecretId:
    Type: String
    Description: Id of the Secrets Manager Secret that contains your Momento Auth Token

Globals:
  Function:
    Runtime: nodejs18.x
    Architectures:
      - arm64
    Tracing: Active
    Timeout: 3
    MemorySize: 1024
    Handler: index.handler
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        SECRET_ID: !Ref SecretId

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ChatUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: preferred_username
          AttributeDataType: String
          Mutable: true
          Required: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false

  JoinRoomFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/join-room
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
          COGNITO_USER_POOL_REGION: !Ref AWS::Region
      Events:
        GraphQL:
          Type: Api
          Properties:
            Path: /graphql
            Method: post

  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: ChatAPI
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId: !Ref CognitoUserPool
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Definition: |
        type Message {
          userId: ID!,
          message: String!
          timestamp: String
        }
        schema {
          query: Query
          mutation: Mutation
        }
        type Query {
          getMessage: String
        }
        type Mutation {
          joinRoom(userId: ID!, roomId: ID!): [String]
          sendMessage(userId: ID!, roomId: ID!, content: String!): String
        }
        type Subscription {
          onNewMessage(roomId: ID!): Message
            @aws_subscribe(mutations: ["sendMessage"])
        }

  JoinRoomDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: JoinRoomDataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt JoinRoomFunction.Arn
      ServiceRoleArn: !GetAtt JoinRoomDataSourceRole.Arn

  JoinRoomDataSourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: JoinRoomDataSource
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt JoinRoomFunction.Arn

  # AppSync Resolver for the Query
  # QueryResolver:
  #   Type: AWS::AppSync::Resolver
  #   Properties:
  #     ApiId: !GetAtt AppSyncApi.ApiId
  #     TypeName: Mutation
  #     FieldName: joinRoom
  #     DataSourceName: !GetAtt JoinRoomDataSource.Name
  #     RequestMappingTemplate: |
  #       {
  #         "version": "2017-02-28",
  #         "operation": "Invoke",
  #         "payload": {
  #           "operation": "joinRoom",
  #           "arguments": $utils.toJson($context.arguments)
  #         }
  #       }
  #     ResponseMappingTemplate: $util.toJson($context.result)

  # AppSync Resolver for the joinChatRoom Mutation
  JoinChatRoomResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: joinRoom
      DataSourceName: !GetAtt JoinRoomDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "operation": "joinRoom",
            "arguments": $utils.toJson($context.arguments),
            "context": {
              "sub": "$ctx.identity.sub",
              "userPoolId": "$env.COGNITO_USER_POOL_ID",
              "region": "$env.COGNITO_USER_POOL_REGION"
            }
          },
          "authorizer": {
            "claims": {
              "sub": "$ctx.identity.sub",
              "cognito:groups": "$util.defaultIfNull($ctx.identity.claims['cognito:groups'], [])"
            },
            "authorizationScopes": ["your-scope-here"]
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)
